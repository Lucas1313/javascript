<?php
/**
 * Maps API functions 
 */


require_once('../config/defines.php');

		
/*******************************************************************************
 ***************                     HEADER                      ***************
 *******************************************************************************/

define('CWF_ROOT','/api');

if(empty($controller)){
	$controller = URI_Parse::getController();
	CWF_Site::start();
	CWF_API::start();
}



/*******************************************************************************
 ***************                  MAIN DISPATCH                  ***************
 *******************************************************************************/
try {
	switch ($controller) {
		// Activity API: Supplies page
		// Call like /api/activity/page/1/
		case 'activity':
			return 'API has been called';
			$ctl = new Controller_ActivityApi();
			$ctl->dispatch();
			break;
		// Admin API: Supplies check-eprize-api, save-facebook-access-token,
		// mediaApprove, mediaDisapprove
		case 'admin':
			$ctl = new Controller_AdminApi();
			$ctl->dispatch();
			break;
		// Cat API: Supplies remove-cat, process-edit-cats 
		case 'cat':
			$ctl = new Controller_CatApi();
			$ctl->dispatch();
			break;
		// Invite API: Supplies check-email-addresses, save-email-addresses,
		// get-url
		case 'invite':
			$ctl = new Controller_InviteApi();
			$ctl->dispatch();
			break;
		// JQuery Validation: Supplies is-email-available, is-logged-in.
		// Calls should look like the following.
		// /api/jquery-validation/is-email-available/?field=email&email=leon.atkinson@clorox.com
		// /api/jquery-validation/is-logged-in/
		case 'jquery-validation':
			$ctl = new CWF_PC_Controller_JqueryValidation();
			$ctl->dispatch();
			break;
		// Media API: Supplies upload-cat-world-photo, upload-cat-world-video, 
		// catworld-page, upload-profile-background, remote-profile-background, 
		// profile-compose
		case 'media':
			$ctl = new Controller_MediaApi();
			$ctl->dispatch();
			break;
		// PawPoints API: Supplies add-to-wish-list, remove-from-wish-list, submit-code,
		// getCodeLocations, getPointsTotal
		case 'paw-points':
			$ctl = new Controller_PawPointsApi();
			$ctl->dispatch();
			break;
		// Supplies  upload-background, remote-background, compose, page,
		// get-by-postcard-id
		case 'postcard':
			$ctl = new Controller_PostcardApi();
			$ctl->dispatch();
			break;
		// Product API: Supplies get-all
		// Call like /api/product/get-all/
		case 'product':
			$ctl = new Controller_ProductApi();
			$ctl->dispatch();
			break;
		// User API: set-privacy, set-optin, save-contact-info, 
		// set-next-url, get-next-url
		case 'user':
			$ctl = new Controller_UserApi();
			$ctl->dispatch();
			break;
		// Wish API: Supplies add, remove, get
		case 'wish':
			$ctl = new Controller_WishApi();
			$ctl->dispatch();
			break;
		// Promotion API: award promotion related points,
		// points for watching videos, etc..
		case 'promotion':
			$ctl = new Controller_PromotionApi();
			$ctl->dispatch();
			break;
        case 's3-service':
			$ctl = new Controller_S3ServiceApi();
			$ctl->dispatch();
			break;
		default:
			// This case will catch null controllers, too. Try the following URI.
			// /api/bleh/
			// This will generate the following response.
			// {"status":false,"message":"Invalid controller 'bleh'","data":null}
			CWF_API::sendResponse(-1, "Invalid controller '{$controller}'");
			CWF_Log::write(__FILE__, "Invalid controller '{$controller}'");
	}
} catch (Exception $exception) {
	// Any exceptions generated by a controller will be caught and turned into
	// a normal response. Try the following URI.
	// /api/jquery-validation/is-email-available/
	// That should generate the following response.
	// {"status":false,"message":"CWF_PC_Controller_JqueryValidation::isEmailAvailable - field param missing","data":null}

	//Pass exception back to caller as JSON
	CWF_API::sendResponse(-1, $exception->getMessage(), 
		array('exception'=>get_class($exception)));
	//Log the error
	CWF_Log::write(__FILE__, $exception->getMessage(), CWF_Log::ERR);
}

/*******************************************************************************
 ***************                     FOOTER                      ***************
 *******************************************************************************/

CWF_API::finish();
CWF_Site::finish();

